{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"dir_",
				"dir_library"
			],
			[
				"dir",
				"dir_source〔variable〕"
			],
			[
				"opc",
				"opcode"
			],
			[
				"op",
				"opcode"
			],
			[
				"add",
				"add_definition"
			],
			[
				"idx",
				"idx_start〔argument〕"
			],
			[
				"pas",
				"parser"
			],
			[
				"f",
				"filename"
			],
			[
				"is_",
				"is_changed"
			],
			[
				"b",
				"buff"
			],
			[
				"code",
				"code_open"
			],
			[
				"le",
				"len_self"
			],
			[
				"st",
				"stop"
			],
			[
				"N",
				"None"
			],
			[
				"in",
				"index"
			],
			[
				"res",
				"result_match"
			],
			[
				"co",
				"compile"
			],
			[
				"__i",
				"__idx_end"
			],
			[
				"__t",
				"__type_match"
			],
			[
				"typ",
				"type_match"
			],
			[
				"ty",
				"type_match"
			],
			[
				"r",
				"result"
			],
			[
				"MA",
				"MATCHING"
			],
			[
				"ret",
				"return〔keyword〕"
			],
			[
				"pa",
				"parser〔variable〕"
			],
			[
				"S",
				"SExecutor"
			],
			[
				"__exe",
				"__exec_opcode"
			],
			[
				"id",
				"idx_start"
			],
			[
				"str",
				"string"
			],
			[
				"sr",
				"string"
			],
			[
				"o",
				"opcodes"
			],
			[
				"B",
				"BUILD_NUMBER"
			],
			[
				"va",
				"var2"
			],
			[
				"re",
				"result"
			],
			[
				"get_",
				"get_temp"
			],
			[
				"pr",
				"project"
			],
			[
				"e",
				"enumerate"
			],
			[
				"no",
				"not_match"
			],
			[
				"nex",
				"next_elem"
			],
			[
				"te",
				"template"
			],
			[
				"ex",
				"extend"
			],
			[
				"s",
				"soperator"
			],
			[
				"oop",
				"operator"
			],
			[
				"def",
				"definitions"
			],
			[
				"de",
				"definitions"
			],
			[
				"id_",
				"idx_start"
			],
			[
				"SE",
				"SET_TYPE_CTUPLE"
			],
			[
				"br",
				"bracket"
			],
			[
				"SER",
				"SET_TYPE_BRACKET"
			],
			[
				"SET_",
				"SET_TYPE_CALL"
			],
			[
				"i",
				"idx_start"
			],
			[
				"__c",
				"__count_temp"
			],
			[
				"idx_",
				"idx_start"
			],
			[
				"__r",
				"__rules"
			],
			[
				"rep",
				"repr_opcode"
			],
			[
				"c",
				"count_braces"
			],
			[
				"matc",
				"matched_code"
			],
			[
				"p",
				"pdb"
			],
			[
				"rer",
				"return〔keyword〕"
			],
			[
				"class",
				"classmethod"
			],
			[
				"Ma",
				"Maybe"
			],
			[
				"__re",
				"__rule"
			],
			[
				"t",
				"template"
			],
			[
				"Sy",
				"SyntaxRule〔class〕"
			],
			[
				"M",
				"MetaDynamicOpCode"
			],
			[
				"sy",
				"symbols"
			],
			[
				"cla",
				"classmethod"
			],
			[
				"a",
				"args"
			],
			[
				"iter",
				"itertools"
			],
			[
				"R",
				"RuntimeError〔class〕"
			],
			[
				"w",
				"word"
			],
			[
				"fo",
				"found"
			],
			[
				"star",
				"startswitch"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\nimport unittest\n\nfrom test_SyntaxRule import test_SyntaxRule\n\n\nunittest.main()\n",
			"file": "/C/Users/askur/Git/ACTL/test/engine_unittest/run.py",
			"file_size": 87,
			"file_write_time": 131610453726099705,
			"settings":
			{
				"buffer_size": 80,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\nimport unittest\n\n\nfrom actl import Code\nfrom parser import opcodes\nfrom actl.code.SyntaxRule import SyntaxRules\n\n\nclass test_SyntaxRule(unittest.TestCase):\n\tdef init(self):\n      code = Code(None, rules, None)\n      rules = SyntaxRules()\n      return code, rules\n\n\tdef test_simple(self):\n      code, rules = self.init()\n      code.buff = [opcodes.VARIABLE('a'),\n                   opcodes.VARIABLE('b'),\n                   opcodes.VARIABLE('c'),\n                   opcodes.VARIABLE('d')]\n\n      @rules.add(opcodes.VARIABLE('b'), opcodes.VARIABLE('c'))\n      def _(var1, var2):\n      \treturn opcodes.VARIABLE('bc')\n\n      code.compile()\n      self.assertEqual(code.buff == [opcodes.VARIABLE('a'),\n                                     opcodes.VARIABLE('bc'),\n                                     opcodes.VARIABLE('d')]\n\nunittest.main()\n",
			"file": "/C/Users/askur/Git/ACTL/test/engine_unittest/test_SyntaxRule.py",
			"file_size": 867,
			"file_write_time": 131612097144536121,
			"settings":
			{
				"buffer_size": 835,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/askur/Git/ACTL/test/run.py",
			"settings":
			{
				"buffer_size": 489,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/askur/Git/ACTL/test/engine/run.py",
			"settings":
			{
				"buffer_size": 80,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/askur/Git/ACTL/source/library/actl/code/Code.py",
			"settings":
			{
				"buffer_size": 2826,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/askur/Git/ACTL/source/library/actl/code/rules.py",
			"settings":
			{
				"buffer_size": 3882,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "re",
		"selected_items":
		[
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Install Package Control"
			]
		],
		"width": 540.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/askur/Git/ACTL/source",
		"/C/Users/askur/Git/ACTL/source/library",
		"/C/Users/askur/Git/ACTL/source/library/actl",
		"/C/Users/askur/Git/ACTL/source/library/actl/code",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/opcodes",
		"/C/Users/askur/Git/ACTL/source/library/actl/parser",
		"/C/Users/askur/Git/ACTL/source/library/actl_types",
		"/C/Users/askur/Git/ACTL/source/library/pyport",
		"/C/Users/askur/Git/ACTL/source/library/pyport/executor",
		"/C/Users/askur/Git/ACTL/test"
	],
	"file_history":
	[
		"/C/Users/askur/Git/ACTL/source/main.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/project/Project.py",
		"/C/Users/askur/Git/ACTL/test/test_case/example.a",
		"/C/Users/askur/Git/ACTL/source/library/actl/TranslateToString.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/rules.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/Code.py",
		"/C/Users/askur/Git/ACTL/source/library/pyport/executor/Scope.py",
		"/C/Users/askur/Git/ACTL/source/library/pyport/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/pyport/executor/SExecutor.py",
		"/C/Users/askur/Git/ACTL/test/test.cmd",
		"/C/Users/askur/Git/ACTL/source/library/pyport/executor/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/SyntaxRule.py",
		"/C/Users/askur/Git/ACTL/source/library/pyport/executor/Executor.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/parser/opcodes.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/parser/parser.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/opcodes/opcodes.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/executor/SExecutor.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/parser/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/Buffer.py",
		"/C/Users/askur/Git/ACTL/source/library/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/executor/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/executor/Executor.py",
		"/C/Users/askur/Git/ACTL/IDE/ACTL.sublime-project",
		"/C/Users/askur/Git/ACTL/source/library/std/operator.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/syntax_rules.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/opcodes/AnyOpCode.py",
		"/C/Users/askur/Git/ACTL/source/library/std/__init__.py",
		"/C/Users/askur/Git/pythonGrammarParser.py",
		"/C/Users/askur/AppData/Local/Programs/Python/Python36-32/Lib/site-packages/pylint/__init__.py",
		"/C/Users/askur/AppData/Local/Programs/Python/Python36-32/Lib/site-packages/pylint/__main__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/opcodes/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/opcodes.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/project/Project.py.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/project/__init__ - Copy.py",
		"/C/Users/askur/Git/ACTL/source/library/project/Project.py",
		"/C/Users/askur/Git/ACTL/source/library/project/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code/opcodes/syntax_rules.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/code.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/code.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/syntax_rules.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/SyntaxRule.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/AnyOpCode.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/__init__.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/parse/opcodes.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/pyparse/opcodes.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/pyparse/parser.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/parser.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/anyopcode.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/pyparsing_opcodes.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes/syntax_opcodes.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/opcodes.py",
		"/C/Users/askur/Git/ACTL/source/library/actl/syntax_opcodes.py"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			")\n",
			"__len__",
			"find",
			"print",
			"True",
			"type(self)",
			"copy",
			"weakref",
			"create",
			".create",
			")\n",
			"type_match",
			"idx_end",
			"super().onl",
			"super().",
			"match",
			".match",
			"MatchResult.",
			"print",
			"APPLYING",
			"MATCH",
			"RULE",
			"SyntaxRule",
			"Code.",
			"MATCH_RULE",
			"Non",
			"__apply_rule",
			"type(self)",
			"SExecutor",
			"BRACKETS",
			"BUILD_CTUPLE",
			"Making",
			"BUILD_CTUPLE",
			"opcodes",
			"()",
			"dest",
			"),",
			"BUILD_CTUPLE",
			"SET_TYPE_BRACKET",
			"SET_VARIABLE",
			"BUILD_STRING",
			"CALL_FUNCTION",
			"VARIABLE",
			"Making",
			"\t ",
			"BUILD_CTUPLE",
			"CALL_FUNCTION",
			"VARIABLE",
			"Word",
			"matched_code",
			"matched_code[0]",
			"idx",
			"bracket",
			"[]\n",
			"SET_TYPE_BRACKET",
			"SET_TYPE_CALL",
			"print",
			"self",
			"])",
			"destination",
			"=[])))\n",
			"BUILD_TUPLE",
			"')):",
			"\n\t\t\t\treturn None\n\t\t\telements = Buffer.create((idx, tmpl, opcode)) + elements\n\t\t\tif type(tmpl) == Or:\n\t\t\t\timport pdb; pdb.set_trace()\n\t\t\tif not tmpl.match(elements):",
			"SyntaxRules",
			"basestring",
			")\n",
			", SearchTemplate",
			"()),",
			"data",
			"print",
			"itertools.chain",
			"itertools.chain(self.__cache",
			"False",
			"\n\t\t\targs += other.__cache, other.__head\n\t\tself.__head = itertools.chain(*args)\n\t\tself.__cache = []\n\t\treturn self\n\n\tdef __getitem__(self, index):\n\t\tif isinstance(index, slice):\n\t\t\tself.__iadd__()\n\t\t\tself.__head = itertools.islice(self.__head, index.start, index.stop, index.step)\n\t\telse:\n\t\t\tself.load(index)\n\t\t\treturn self.__cache[index]\n",
			"SearchTemplate",
			"Many",
			"\t\tparser.setParseAction(lambda _: cls('line_end'))\n\t\tyield parser\n\t\t\n\t\tfor symbol in cls.symbols:\n\t\t\tparser = pyparsing.Word(symbol, max=1)\n\t\t\tparser.setParseAction(lambda tokens: cls(tokens[0]))\n\t\t\tyield parser",
			"print",
			"elements",
			"):",
			"True",
			"'):",
			"self.buff",
			"mainf",
			"__rules",
			"):\n",
			"self.code",
			"after_transform",
			"__transform",
			"\t ",
			"Project",
			"buff",
			"decorator",
			"AnySyntaxCode",
			"AnyVirtualOpCode"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"result_match",
			"_match",
			"._match",
			"   ",
			"MATCHING",
			"APPLY",
			"self.",
			"MATCHING_RULE",
			"CTUPLE",
			"out",
			"opcodes.BUILD_CTUPLE",
			"opcodes.SET_TYPE_BRACKET",
			"opcodes.SET_VARIABLE",
			"opcodes.BUILD_STRING",
			"opcodes.CALL_FUNCTION",
			"opcodes.VARIABLE",
			"opcodes.Making",
			"\t",
			"opcodes.CALL_FUNCTION",
			"opcodes.VARIABLE",
			"_",
			"code[idx_start]",
			"idx_start",
			"brucket",
			"SET_TYPE_CTUPLE",
			"SET_TYPE_BRACKET",
			"dest",
			"BUILD_CTUPLE",
			"str",
			"",
			"opcode",
			"rules",
			"self.buff",
			"after_compile",
			"__apply_rule",
			"\t",
			"AnyOpCode"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/askur/Git/ACTL/test/engine_unittest/run.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 80,
						"regions":
						{
						},
						"selection":
						[
							[
								61,
								46
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/askur/Git/ACTL/test/engine_unittest/test_SyntaxRule.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 835,
						"regions":
						{
						},
						"selection":
						[
							[
								636,
								636
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 192.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/askur/Git/ACTL/test/run.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 489,
						"regions":
						{
						},
						"selection":
						[
							[
								403,
								403
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/askur/Git/ACTL/test/engine/run.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 80,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/askur/Git/ACTL/source/library/actl/code/Code.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2826,
						"regions":
						{
						},
						"selection":
						[
							[
								202,
								206
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/askur/Git/ACTL/source/library/actl/code/rules.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3882,
						"regions":
						{
						},
						"selection":
						[
							[
								282,
								214
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 40.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 186.0
	},
	"pinned_build_system": "",
	"project": "ACTL.sublime-project",
	"replace":
	{
		"height": 76.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
