- py-code: |
   from actl.Project import Lazy

   def pyFunc(project, data):
      data = type(project)(source=data).data
      name = data['name']
      args = ', '.join(data.get('args', ()))
      code = data['code'].replace('\n', '\n  ')
      code = (
         f"def {name}({args}):\n"
         f"  {code}"
      )
      lcScope = {}
      exec(code, globals(), lcScope)
      project[name] = lcScope[name]

   def pyKey(project, data):
      data = type(project)(source=data).data
      name = data['name']
      code = data['code'].replace('\n', '\n  ')
      code = (
        f"def {name}():\n"
        f"  {code}"
      )
      lcScope = {}
      exec(code, globals(), lcScope)
      project[name] = Lazy(lcScope[name])

   project['handlers', 'py-key'] = pyKey
   project['handlers', 'py-func'] = pyFunc


- py-key:
   name: rules
   code: |
      import std
      return std.RULES


- py-key:
   name: scope
   code: |
      import actl
      import std


      def _getPyToAVars():
         for varName in ('print',):
            var = eval(varName)
            yield varName, actl.objects.PyToA.call(var)


      def _getACTLVars():
         for varName, clsName in (
            ('True', 'ATrue'),
            ('False', 'AFalse'),
            ('Bool', 'Bool'),
            ('String', 'String'),
            ('Number', 'Number'),
            ('elif', 'elif_'),
            ('else', 'else_'),
            ('None', 'ANone'),
            ('PyToA', 'PyToA')
         ):
            var = getattr(actl.objects, clsName)
            yield varName, var


      def _getSTDVars():
         for varName, clsName in (
            ('if', 'If'),
            ('while', 'While'),
            ('def', 'Function')
         ):
            var = getattr(std.objects, clsName)
            yield varName, var


      return actl.Scope({
         **dict(_getPyToAVars()),
         **dict(_getACTLVars()),
         **dict(_getSTDVars())
      })


- py-key:
   name: uinput
   code: |
      import actl

      return actl.Buffer(char for line in open(this['mainf']) for char in line)


- py-key:
   name: parser
   code: |
      import actl

      return actl.Parser(this['scope'], this['rules'], this['uinput'])


- py-key:
   name: executor
   code: |
      import std
      from actl.Buffer import Buffer

      this['code'] = this['parser']
      return std.Executor(this['code'], this['scope'])


- py-func:
   name: build
   code: |
      this['executor'].execute()
