- py-code: |
   def py_func(project, data):
      data = type(project)(source=data).data
      name = data['name']
      args = ', '.join(data.get('args', ()))
      code = data['code'].replace('\n', '\n  ')
      code = (
         f"def {name}({args}):\n"
         f"  {code}"
      )
      lc_scope = {}
      exec(code, globals(), lc_scope)
      project[name] = lc_scope[name]

   def py_key(project, data):
      data = type(project)(source=data).data
      name = data['name']
      code = data['code'].replace('\n', '\n  ')
      code = (
        f"def {name}():\n"
        f"  {code}"
      )
      lc_scope = {}
      exec(code, globals(), lc_scope)
      project[name] = lc_scope[name]()
   project['handlers', 'py-key'] = py_key
   project['handlers', 'py-func'] = py_func


- py-func:
   name: build
   code: |
      import actl

      uinput = this['uinput']
      rules = this['rules']
      parser = actl.Parser(rules, uinput)
      code = list(parser.extract())
      print(code)
      this['executorCls'](code, this['scope'])


- py-key:
   name: rules
   code: |
      import std
      return std.RULES


- py-key:
   name: scope
   code: |
      import actl
      import std
      scope = std.Scope()
      scope['print'] = actl.objects.PyToA.fromPy(print)
      scope['String'] = actl.objects.String
      return scope


- py-key:
   name: executorCls
   code: |
      import std
      return std.Executor


- pypropl scope:
    pydef get(): |
      import std
      import actl
      scope = std.Scope()
      scope.update({'stack':[], 'codes':[], actl.tokens.VARIABLE('print'):'print'})
      scope.update(__import__('std.abuiltins').abuiltins.abuiltins)
      return scope
